@page "/Cobros/Create/"
@inject CobrosServices cobroService
@inject CobrosDetalleServices cobroDetallesServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        @* Registro de Cobro *@
        <div class="card shadow-lg mb-4">
            <div class="card-header bg-success text-white">
                <h3>Registro de Cobros</h3>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="Deudor" class="form-label">Deudor:</label>
                    <InputSelect @bind-Value="cobro.DeudorId" class="form-select" aria-label="DeudorId">
                        <option value="0">Selecciona un Deudor</option>
                        @foreach (var item in listaDeudores)
                        {
                            <option value="@item.DeudorId">@item.Nombres</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => cobro.DeudorId)" />
                </div>
                <div class="mb-3">
                    <label for="Fecha" class="form-label">Fecha:</label>
                    <InputDate @bind-Value="cobro.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => cobro.Fecha)" />
                </div>
                <div class="mb-3">
                    <label for="Monto" class="form-label">Monto Total del Cobro:</label>
                    <InputNumber @bind-Value="cobro.Monto" class="form-control" disabled />
                    <ValidationMessage For="@(() => cobro.Monto)" />
                </div>

                @if (existe)
                {
                    <div class="alert alert-danger" role="alert">
                        Ya existe un cobro con esa descripción
                    </div>
                }
                @if (guardo)
                {
                    <p class="text-success">El cobro se guardó exitosamente</p>
                }
                @if (elimino)
                {
                    <p class="text-success">El cobro se eliminó exitosamente</p>
                }
            </div>
        </div>

        @* Detalles del Cobro *@
        <div class="card shadow-lg mb-4">
            <div class="card-header bg-success bg-opacity-75 text-white">
                <h3>Detalles del Cobro</h3>
            </div>
            <div class="card-body">
                <div class="row align-items-center mb-3">
                    <div class="col-4">
                        <label for="Prestamo" class="form-label">Préstamo:</label>
                        <InputSelect @bind-Value="cobroDetalle.PrestamoId" class="form-select" aria-label="PrestamoId">
                            <option value="0">Selecciona un préstamo</option>
                            @foreach (var item in listaPrestamo)
                            {
                                <option value="@item.PrestamoId">@item.Concepto</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => cobroDetalle.PrestamoId)" />
                    </div>
                    <div class="col-4">
                        <label for="ValorCobrado" class="form-label">Valor Cobrado:</label>
                        <InputNumber @bind-Value="cobroDetalle.ValorCobrado" class="form-control" />
                        <ValidationMessage For="@(() => cobroDetalle.ValorCobrado)" />
                    </div>
                    <div class="col-2">
                        <button type="button" class="btn btn-primary" @onclick="GuardarDetalle">
                            <i class="bi bi-plus-square"></i> Agregar
                        </button>
                    </div>
                </div>

                <table class="table table-bordered text-center">
                    <thead class="bg-light">
                        <tr>
                            <th>Detalle Id</th>
                            <th>Préstamo Id</th>
                            <th>Concepto</th>
                            <th>Valor Cobrado</th>
                            <th>Eliminar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in listaCobroDetalle)
                        {
                            <tr>
                                <td>@detalle.DetalleId</td>
                                <td>@detalle.PrestamoId</td>
                                <td>@detalle.Prestamo?.Concepto</td>
                                <td>@detalle.ValorCobrado</td>
                                <td>
                                    <button class="btn btn-danger" @onclick="() => EliminarDetalle(detalle.DetalleId)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="card-footer">
                <p><strong>Cantidad de cobros aplicados:</strong> @listaCobroDetalle.Count</p>
            </div>
        </div>
    </div>

    <div class="card-footer bg-light d-flex justify-content-center mt-3">
        <div class="btn-group">
            <button type="button" class="btn btn-outline-success" @onclick="Nuevo">
                <i class="bi bi-plus"></i> Nuevo
            </button>
            <button type="button" class="btn btn-outline-primary" @onclick="Guardar">
                <i class="bi bi-save"></i> Guardar
            </button>
            <a href="/Cobros/Index" class="btn btn-outline-danger">
                <i class="bi bi-arrow-left"></i> Volver
            </a>
        </div>
    </div>
</EditForm>

@code {
    public Cobros cobro { get; set; } = new Cobros();
    public CobrosDetalle cobroDetalle { get; set; } = new CobrosDetalle();
    public List<Deudores> listaDeudores { get; set; } = new List<Deudores>();
    public List<CobrosDetalle> listaCobroDetalle { get; set; } = new List<CobrosDetalle>();
    public List<Prestamos> listaPrestamo { get; set; } = new List<Prestamos>();
    public bool existe { get; set; }
    public bool guardo { get; set; }
    public bool elimino { get; set; }

    protected override async Task OnInitializedAsync()
    {
        listaDeudores = await cobroService.ObtenerDeudores();
        listaPrestamo = await cobroService.ObtenerPrestamos();
        listaCobroDetalle = new List<CobrosDetalle>();
    }

    public async Task Guardar()
    {
        if (await Validar())
            return;

        cobro.Monto = listaCobroDetalle.Sum(cd => cd.ValorCobrado); 
        cobro.CobroDetalles = listaCobroDetalle; 

        guardo = await cobroService.Guardar(cobro);
        guardo = true;
        Nuevo();
    }

    public async Task GuardarDetalle()
    {
        if (await ValidarDetalle())
            return;

        
        cobroDetalle.CobroId = cobro.CobroId;

        
        var prestamoSeleccionado = listaPrestamo.FirstOrDefault(p => p.PrestamoId == cobroDetalle.PrestamoId);
        if (prestamoSeleccionado != null)
        {
            cobroDetalle.Prestamo = prestamoSeleccionado; 
        }

        
        cobroDetalle.DetalleId = listaCobroDetalle.Count + 1; 

        
        listaCobroDetalle.Add(cobroDetalle);
        cobroDetalle = new CobrosDetalle(); 
        StateHasChanged();
    }

    public void Nuevo()
    {
        cobro = new Cobros();
        cobroDetalle = new CobrosDetalle();
        listaCobroDetalle = new List<CobrosDetalle>();
        StateHasChanged();
    }

    public async Task<bool> Validar()
    {
        var cobroExistente = await cobroService.Listar(c => c.CobroId == cobro.CobroId);
        existe = cobroExistente.Any();
        return existe;
    }

    public async Task<bool> ValidarDetalle()
    {
        return false;
    }

    public void EliminarDetalle(int detalleId)
    {
        var detalle = listaCobroDetalle.FirstOrDefault(cd => cd.DetalleId == detalleId);
        if (detalle != null)
        {
            listaCobroDetalle.Remove(detalle);
            StateHasChanged();
        }
    }
}
