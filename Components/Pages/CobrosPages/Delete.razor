@page "/Cobros/Delete/{cobroId:int}"
@inject CobrosServices cobroService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Eliminar Cobro</PageTitle>

<Toasts class="p-3 mt-5" Messages="messages" Placement="ToastsPlacement.TopRight" />

<div class="border shadow-lg p-3 rounded">
    <div class="card-header bg-danger text-white text-center py-2 rounded">
        <h3 style="font-weight: bold;" class="mb-0">Eliminar Cobro</h3>
    </div>

    <div class="card-body">
        @if (cobro != null)
        {
            <div class="mb-3">
                <label class="form-label"><strong>Deudor:</strong></label>
                @if (cobro.Deudor != null)
                {
                    <p>@cobro.Deudor.Nombres</p>
                }
                else
                {
                    <p>No se encontró el deudor.</p>
                }
            </div>

            <div class="mb-3">
                <label class="form-label"><strong>Fecha:</strong></label>
                <p>@cobro.Fecha.ToShortDateString()</p>
            </div>

            <div class="mb-3">
                <label class="form-label"><strong>Monto:</strong></label>
                <p>@cobro.Monto.ToString("C")</p>
            </div>

            <div class="alert alert-danger" role="alert">
                ¿Estás seguro de que deseas eliminar este cobro?
            </div>

            <div class="text-end">
                <button type="button" @onclick="ConfirmarEliminacion" class="btn btn-danger me-2">
                    <i class="btn bi bi-trash"></i> Eliminar
                </button>
                <button type="button" @onclick="Volver" class="btn btn-primary">
                    <i class="bi bi-arrow-left mt-3"></i> Volver
                </button>
            </div>
        }
        else
        {
            <div class="alert alert-warning" role="alert">
                No se encontró el cobro solicitado.
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public int cobroId { get; set; }
    private Cobros cobro;
    private List<ToastMessage> messages = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        cobro = await cobroService.Buscar(cobroId);
    }

    private async Task ConfirmarEliminacion()
    {
        if (await cobroService.Eliminar(cobroId))
        {
            ShowMessage(ToastType.Success, "Cobro eliminado con éxito.");
            navigationManager.NavigateTo("/Cobros/Index");
        }
        else
        {
            ShowMessage(ToastType.Warning, "Error al eliminar el cobro.");
        }
    }

    private void Volver()
    {
        navigationManager.NavigateTo("/Cobros/Index");
    }

    private void ShowMessage(ToastType toastType, string customMessage) 
    {
        messages.Add(new ToastMessage 
        { 
            Type = toastType, 
            Title = "Notificación", 
            HelpText = $"{DateTime.Now}", 
            Message = customMessage 
        });
    }
}
